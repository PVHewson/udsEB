// <auto-generated />

using System;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using System.Collections.ObjectModel;
using System.Linq;
using static uds.CRM.Model.ContextMixin; // Org(), Trace()

namespace uds.CRM.Model {
public partial class Account
{
        /// <summary>1:N account -> actioncard via regardingobjectid (Schema: account_actioncard)</summary>
        public EntityCollection GetActioncardByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("actioncard")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->actioncard via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N account -> activityparty via partyid (Schema: account_activity_parties)</summary>
        public EntityCollection GetActivitypartyByPartyid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("activityparty")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("partyid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->activityparty via partyid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N account -> activitypointer via regardingobjectid (Schema: Account_ActivityPointers)</summary>
        public EntityCollection GetActivitypointerByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("activitypointer")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->activitypointer via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N account -> adx_inviteredemption via regardingobjectid (Schema: account_adx_inviteredemptions)</summary>
        public EntityCollection GetAdxInviteredemptionByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("adx_inviteredemption")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->adx_inviteredemption via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N account -> adx_portalcomment via regardingobjectid (Schema: account_adx_portalcomments)</summary>
        public EntityCollection GetAdxPortalcommentByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("adx_portalcomment")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->adx_portalcomment via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N account -> annotation via objectid (Schema: Account_Annotation)</summary>
        public EntityCollection GetAnnotationByObjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("annotation")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("objectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->annotation via objectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N account -> appointment via regardingobjectid (Schema: Account_Appointments)</summary>
        public EntityCollection GetAppointmentByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("appointment")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->appointment via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N account -> asyncoperation via regardingobjectid (Schema: Account_AsyncOperations)</summary>
        public EntityCollection GetAsyncoperationByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("asyncoperation")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->asyncoperation via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N account -> bulkdeletefailure via regardingobjectid (Schema: Account_BulkDeleteFailures)</summary>
        public EntityCollection GetBulkdeletefailureByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("bulkdeletefailure")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->bulkdeletefailure via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N account -> chat via regardingobjectid (Schema: account_chats)</summary>
        public EntityCollection GetChatByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("chat")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->chat via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N account -> connection via record1id (Schema: account_connections1)</summary>
        public EntityCollection GetConnectionByRecord1id(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("connection")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("record1id", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->connection via record1id id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N account -> connection via record2id (Schema: account_connections2)</summary>
        public EntityCollection GetConnectionByRecord2id(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("connection")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("record2id", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->connection via record2id id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N account -> customerrelationship via customerid (Schema: account_customer_relationship_customer)</summary>
        public EntityCollection GetCustomerrelationshipByCustomerid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("customerrelationship")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("customerid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->customerrelationship via customerid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N account -> customerrelationship via partnerid (Schema: account_customer_relationship_partner)</summary>
        public EntityCollection GetCustomerrelationshipByPartnerid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("customerrelationship")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("partnerid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->customerrelationship via partnerid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N account -> customeraddress via parentid (Schema: Account_CustomerAddress)</summary>
        public EntityCollection GetCustomeraddressByParentid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("customeraddress")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("parentid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->customeraddress via parentid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N account -> duplicaterecord via baserecordid (Schema: Account_DuplicateBaseRecord)</summary>
        public EntityCollection GetDuplicaterecordByBaserecordid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("duplicaterecord")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("baserecordid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->duplicaterecord via baserecordid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N account -> duplicaterecord via duplicaterecordid (Schema: Account_DuplicateMatchingRecord)</summary>
        public EntityCollection GetDuplicaterecordByDuplicaterecordid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("duplicaterecord")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("duplicaterecordid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->duplicaterecord via duplicaterecordid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N account -> email via emailsender (Schema: Account_Email_EmailSender)</summary>
        public EntityCollection GetEmailByEmailsender(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("email")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("emailsender", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->email via emailsender id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N account -> email via sendersaccount (Schema: Account_Email_SendersAccount)</summary>
        public EntityCollection GetEmailBySendersaccount(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("email")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("sendersaccount", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->email via sendersaccount id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N account -> email via regardingobjectid (Schema: Account_Emails)</summary>
        public EntityCollection GetEmailByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("email")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->email via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N account -> fax via regardingobjectid (Schema: Account_Faxes)</summary>
        public EntityCollection GetFaxByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("fax")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->fax via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N account -> letter via regardingobjectid (Schema: Account_Letters)</summary>
        public EntityCollection GetLetterByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("letter")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->letter via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N account -> mailboxtrackingfolder via regardingobjectid (Schema: Account_MailboxTrackingFolder)</summary>
        public EntityCollection GetMailboxtrackingfolderByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("mailboxtrackingfolder")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->mailboxtrackingfolder via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N account -> account via masterid (Schema: account_master_account)</summary>
        public Collection<Account> GetAccountByMasterid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("account")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("masterid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->account via masterid id={0}", this.Id);
            var ec = this.Org().RetrieveMultiple(q);
            var list = new Collection<Account>(ec.Entities.Select(e => e.ToEntity<Account>()).ToList());
            return list;
        }

        /// <summary>1:N account -> msfp_alert via regardingobjectid (Schema: account_msfp_alerts)</summary>
        public EntityCollection GetMsfpAlertByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("msfp_alert")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->msfp_alert via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N account -> msfp_surveyinvite via regardingobjectid (Schema: account_msfp_surveyinvites)</summary>
        public EntityCollection GetMsfpSurveyinviteByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("msfp_surveyinvite")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->msfp_surveyinvite via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N account -> msfp_surveyresponse via regardingobjectid (Schema: account_msfp_surveyresponses)</summary>
        public EntityCollection GetMsfpSurveyresponseByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("msfp_surveyresponse")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->msfp_surveyresponse via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N account -> account via parentaccountid (Schema: account_parent_account)</summary>
        public Collection<Account> GetAccountByParentaccountid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("account")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("parentaccountid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->account via parentaccountid id={0}", this.Id);
            var ec = this.Org().RetrieveMultiple(q);
            var list = new Collection<Account>(ec.Entities.Select(e => e.ToEntity<Account>()).ToList());
            return list;
        }

        /// <summary>1:N account -> phonecall via regardingobjectid (Schema: Account_Phonecalls)</summary>
        public EntityCollection GetPhonecallByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("phonecall")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->phonecall via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N account -> postfollow via regardingobjectid (Schema: account_PostFollows)</summary>
        public EntityCollection GetPostfollowByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("postfollow")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->postfollow via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N account -> postregarding via regardingobjectid (Schema: account_PostRegardings)</summary>
        public EntityCollection GetPostregardingByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("postregarding")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->postregarding via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N account -> postrole via regardingobjectid (Schema: account_PostRoles)</summary>
        public EntityCollection GetPostroleByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("postrole")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->postrole via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N account -> principalobjectattributeaccess via objectid (Schema: account_principalobjectattributeaccess)</summary>
        public EntityCollection GetPrincipalobjectattributeaccessByObjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("principalobjectattributeaccess")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("objectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->principalobjectattributeaccess via objectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N account -> processsession via regardingobjectid (Schema: Account_ProcessSessions)</summary>
        public EntityCollection GetProcesssessionByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("processsession")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->processsession via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N account -> recurringappointmentmaster via regardingobjectid (Schema: Account_RecurringAppointmentMasters)</summary>
        public EntityCollection GetRecurringappointmentmasterByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("recurringappointmentmaster")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->recurringappointmentmaster via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N account -> sample_donation via regardingobjectid (Schema: account_sample_donations)</summary>
        public EntityCollection GetSampleDonationByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("sample_donation")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->sample_donation via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N account -> sharepointdocument via regardingobjectid (Schema: Account_SharepointDocument)</summary>
        public EntityCollection GetSharepointdocumentByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("sharepointdocument")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->sharepointdocument via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N account -> sharepointdocumentlocation via regardingobjectid (Schema: Account_SharepointDocumentLocation)</summary>
        public EntityCollection GetSharepointdocumentlocationByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("sharepointdocumentlocation")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->sharepointdocumentlocation via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N account -> socialactivity via regardingobjectid (Schema: Account_SocialActivities)</summary>
        public EntityCollection GetSocialactivityByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("socialactivity")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->socialactivity via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N account -> syncerror via regardingobjectid (Schema: Account_SyncErrors)</summary>
        public EntityCollection GetSyncerrorByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("syncerror")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->syncerror via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N account -> task via regardingobjectid (Schema: Account_Tasks)</summary>
        public Collection<Task> GetTaskByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("task")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->task via regardingobjectid id={0}", this.Id);
            var ec = this.Org().RetrieveMultiple(q);
            var list = new Collection<Task>(ec.Entities.Select(e => e.ToEntity<Task>()).ToList());
            return list;
        }

        /// <summary>1:N account -> adx_invitation via adx_assigntoaccount (Schema: adx_invitation_assigntoaccount)</summary>
        public EntityCollection GetAdxInvitationByAdxAssigntoaccount(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("adx_invitation")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("adx_assigntoaccount", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->adx_invitation via adx_assigntoaccount id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N account -> contact via parentcustomerid (Schema: contact_customer_accounts)</summary>
        public Collection<Contact> GetContactByParentcustomerid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("contact")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("parentcustomerid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->contact via parentcustomerid id={0}", this.Id);
            var ec = this.Org().RetrieveMultiple(q);
            var list = new Collection<Contact>(ec.Entities.Select(e => e.ToEntity<Contact>()).ToList());
            return list;
        }

        /// <summary>1:N account -> account via msa_managingpartnerid (Schema: msa_account_managingpartner)</summary>
        public Collection<Account> GetAccountByMsaManagingpartnerid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("account")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("msa_managingpartnerid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->account via msa_managingpartnerid id={0}", this.Id);
            var ec = this.Org().RetrieveMultiple(q);
            var list = new Collection<Account>(ec.Entities.Select(e => e.ToEntity<Account>()).ToList());
            return list;
        }

        /// <summary>1:N account -> contact via msa_managingpartnerid (Schema: msa_contact_managingpartner)</summary>
        public Collection<Contact> GetContactByMsaManagingpartnerid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("contact")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("msa_managingpartnerid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->contact via msa_managingpartnerid id={0}", this.Id);
            var ec = this.Org().RetrieveMultiple(q);
            var list = new Collection<Contact>(ec.Entities.Select(e => e.ToEntity<Contact>()).ToList());
            return list;
        }

        /// <summary>1:N account -> slakpiinstance via regarding (Schema: slakpiinstance_account)</summary>
        public EntityCollection GetSlakpiinstanceByRegarding(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("slakpiinstance")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regarding", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->slakpiinstance via regarding id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N account -> socialactivity via postauthor (Schema: SocialActivity_PostAuthor_accounts)</summary>
        public EntityCollection GetSocialactivityByPostauthor(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("socialactivity")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("postauthor", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->socialactivity via postauthor id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N account -> socialactivity via postauthoraccount (Schema: SocialActivity_PostAuthorAccount_accounts)</summary>
        public EntityCollection GetSocialactivityByPostauthoraccount(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("socialactivity")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("postauthoraccount", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->socialactivity via postauthoraccount id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N account -> socialprofile via customerid (Schema: Socialprofile_customer_accounts)</summary>
        public EntityCollection GetSocialprofileByCustomerid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("socialprofile")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("customerid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->socialprofile via customerid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N account -> userentityinstancedata via objectid (Schema: userentityinstancedata_account)</summary>
        public EntityCollection GetUserentityinstancedataByObjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("userentityinstancedata")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("objectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] account->userentityinstancedata via objectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>N:1 account -> account via masterid (Schema: account_master_account)</summary>
        public Collection<Account> GetAccountFromMasterid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("masterid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "account", StringComparison.OrdinalIgnoreCase))
                return new Collection<Account>(); // empty
            var e = this.Org().Retrieve("account", er.Id, columns);
            this.Trace("[REL] account->account via masterid id={0}", er.Id);
            return new Collection<Account>(new[] { e.ToEntity<Account>() });
        }

        /// <summary>N:1 account -> account via parentaccountid (Schema: account_parent_account)</summary>
        public Collection<Account> GetAccountFromParentaccountid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("parentaccountid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "account", StringComparison.OrdinalIgnoreCase))
                return new Collection<Account>(); // empty
            var e = this.Org().Retrieve("account", er.Id, columns);
            this.Trace("[REL] account->account via parentaccountid id={0}", er.Id);
            return new Collection<Account>(new[] { e.ToEntity<Account>() });
        }

        /// <summary>N:1 account -> contact via primarycontactid (Schema: account_primary_contact)</summary>
        public Collection<Contact> GetContactFromPrimarycontactid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("primarycontactid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "contact", StringComparison.OrdinalIgnoreCase))
                return new Collection<Contact>(); // empty
            var e = this.Org().Retrieve("contact", er.Id, columns);
            this.Trace("[REL] account->contact via primarycontactid id={0}", er.Id);
            return new Collection<Contact>(new[] { e.ToEntity<Contact>() });
        }

        /// <summary>N:1 account -> businessunit via owningbusinessunit (Schema: business_unit_accounts)</summary>
        public EntityCollection GetBusinessunitFromOwningbusinessunit(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("owningbusinessunit");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "businessunit", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("businessunit", er.Id, columns);
            this.Trace("[REL] account->businessunit via owningbusinessunit id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 account -> imagedescriptor via entityimageid (Schema: lk_account_entityimage)</summary>
        public EntityCollection GetImagedescriptorFromEntityimageid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("entityimageid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "imagedescriptor", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("imagedescriptor", er.Id, columns);
            this.Trace("[REL] account->imagedescriptor via entityimageid id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 account -> systemuser via createdby (Schema: lk_accountbase_createdby)</summary>
        public EntityCollection GetSystemuserFromCreatedby(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("createdby");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "systemuser", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("systemuser", er.Id, columns);
            this.Trace("[REL] account->systemuser via createdby id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 account -> systemuser via createdonbehalfby (Schema: lk_accountbase_createdonbehalfby)</summary>
        public EntityCollection GetSystemuserFromCreatedonbehalfby(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("createdonbehalfby");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "systemuser", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("systemuser", er.Id, columns);
            this.Trace("[REL] account->systemuser via createdonbehalfby id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 account -> systemuser via modifiedby (Schema: lk_accountbase_modifiedby)</summary>
        public EntityCollection GetSystemuserFromModifiedby(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("modifiedby");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "systemuser", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("systemuser", er.Id, columns);
            this.Trace("[REL] account->systemuser via modifiedby id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 account -> systemuser via modifiedonbehalfby (Schema: lk_accountbase_modifiedonbehalfby)</summary>
        public EntityCollection GetSystemuserFromModifiedonbehalfby(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("modifiedonbehalfby");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "systemuser", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("systemuser", er.Id, columns);
            this.Trace("[REL] account->systemuser via modifiedonbehalfby id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 account -> externalparty via createdbyexternalparty (Schema: lk_externalparty_account_createdby)</summary>
        public EntityCollection GetExternalpartyFromCreatedbyexternalparty(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("createdbyexternalparty");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "externalparty", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("externalparty", er.Id, columns);
            this.Trace("[REL] account->externalparty via createdbyexternalparty id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 account -> externalparty via modifiedbyexternalparty (Schema: lk_externalparty_account_modifiedby)</summary>
        public EntityCollection GetExternalpartyFromModifiedbyexternalparty(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("modifiedbyexternalparty");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "externalparty", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("externalparty", er.Id, columns);
            this.Trace("[REL] account->externalparty via modifiedbyexternalparty id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 account -> sla via slaid (Schema: manualsla_account)</summary>
        public EntityCollection GetSlaFromSlaid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("slaid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "sla", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("sla", er.Id, columns);
            this.Trace("[REL] account->sla via slaid id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 account -> account via msa_managingpartnerid (Schema: msa_account_managingpartner)</summary>
        public Collection<Account> GetAccountFromMsaManagingpartnerid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("msa_managingpartnerid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "account", StringComparison.OrdinalIgnoreCase))
                return new Collection<Account>(); // empty
            var e = this.Org().Retrieve("account", er.Id, columns);
            this.Trace("[REL] account->account via msa_managingpartnerid id={0}", er.Id);
            return new Collection<Account>(new[] { e.ToEntity<Account>() });
        }

        /// <summary>N:1 account -> owner via ownerid (Schema: owner_accounts)</summary>
        public EntityCollection GetOwnerFromOwnerid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("ownerid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "owner", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("owner", er.Id, columns);
            this.Trace("[REL] account->owner via ownerid id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 account -> processstage via stageid (Schema: processstage_account)</summary>
        public EntityCollection GetProcessstageFromStageid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("stageid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "processstage", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("processstage", er.Id, columns);
            this.Trace("[REL] account->processstage via stageid id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 account -> sla via slainvokedid (Schema: sla_account)</summary>
        public EntityCollection GetSlaFromSlainvokedid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("slainvokedid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "sla", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("sla", er.Id, columns);
            this.Trace("[REL] account->sla via slainvokedid id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 account -> systemuser via preferredsystemuserid (Schema: system_user_accounts)</summary>
        public EntityCollection GetSystemuserFromPreferredsystemuserid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("preferredsystemuserid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "systemuser", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("systemuser", er.Id, columns);
            this.Trace("[REL] account->systemuser via preferredsystemuserid id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 account -> team via owningteam (Schema: team_accounts)</summary>
        public EntityCollection GetTeamFromOwningteam(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("owningteam");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "team", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("team", er.Id, columns);
            this.Trace("[REL] account->team via owningteam id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 account -> transactioncurrency via transactioncurrencyid (Schema: transactioncurrency_account)</summary>
        public EntityCollection GetTransactioncurrencyFromTransactioncurrencyid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("transactioncurrencyid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "transactioncurrency", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("transactioncurrency", er.Id, columns);
            this.Trace("[REL] account->transactioncurrency via transactioncurrencyid id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 account -> systemuser via owninguser (Schema: user_accounts)</summary>
        public EntityCollection GetSystemuserFromOwninguser(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("owninguser");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "systemuser", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("systemuser", er.Id, columns);
            this.Trace("[REL] account->systemuser via owninguser id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:N account <-> powerpagecomponent via powerpagecomponent_mspp_webrole_account (intersect: powerpagecomponent_mspp_webrole_account)</summary>
        public EntityCollection GetPowerpagecomponentViaPowerpagecomponentMsppWebroleAccount(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("powerpagecomponent")
            {
                ColumnSet = columns,
                TopCount = top
            };

            // Join OTHER -> INTERSECT on OTHER primary id, filter INTERSECT.thisIdAttr == this.Id
            var link = new LinkEntity("powerpagecomponent", "powerpagecomponent_mspp_webrole_account", "powerpagecomponentid", "powerpagecomponentid", JoinOperator.Inner)
            {
                LinkCriteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("accountid", ConditionOperator.Equal, this.Id) }
                }
            };

            q.LinkEntities.Add(link);
            this.Trace("[REL] account<->powerpagecomponent via powerpagecomponent_mspp_webrole_account");
            return this.Org().RetrieveMultiple(q);
        }

}
}
