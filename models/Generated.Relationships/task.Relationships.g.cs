// <auto-generated />

using System;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using System.Collections.ObjectModel;
using System.Linq;
using static uds.CRM.Model.ContextMixin; // Org(), Trace()

namespace uds.CRM.Model {
public partial class Task
{
        /// <summary>1:N task -> slakpiinstance via regarding (Schema: slakpiinstance_task)</summary>
        public EntityCollection GetSlakpiinstanceByRegarding(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("slakpiinstance")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regarding", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] task->slakpiinstance via regarding id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N task -> actioncard via regardingobjectid (Schema: task_actioncard)</summary>
        public EntityCollection GetActioncardByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("actioncard")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] task->actioncard via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N task -> activityparty via activityid (Schema: task_activity_parties)</summary>
        public EntityCollection GetActivitypartyByActivityid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("activityparty")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("activityid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] task->activityparty via activityid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N task -> annotation via objectid (Schema: Task_Annotation)</summary>
        public EntityCollection GetAnnotationByObjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("annotation")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("objectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] task->annotation via objectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N task -> asyncoperation via regardingobjectid (Schema: Task_AsyncOperations)</summary>
        public EntityCollection GetAsyncoperationByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("asyncoperation")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] task->asyncoperation via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N task -> bulkdeletefailure via regardingobjectid (Schema: Task_BulkDeleteFailures)</summary>
        public EntityCollection GetBulkdeletefailureByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("bulkdeletefailure")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] task->bulkdeletefailure via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N task -> connection via record1id (Schema: task_connections1)</summary>
        public EntityCollection GetConnectionByRecord1id(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("connection")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("record1id", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] task->connection via record1id id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N task -> connection via record2id (Schema: task_connections2)</summary>
        public EntityCollection GetConnectionByRecord2id(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("connection")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("record2id", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] task->connection via record2id id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N task -> duplicaterecord via baserecordid (Schema: Task_DuplicateBaseRecord)</summary>
        public EntityCollection GetDuplicaterecordByBaserecordid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("duplicaterecord")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("baserecordid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] task->duplicaterecord via baserecordid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N task -> duplicaterecord via duplicaterecordid (Schema: Task_DuplicateMatchingRecord)</summary>
        public EntityCollection GetDuplicaterecordByDuplicaterecordid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("duplicaterecord")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("duplicaterecordid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] task->duplicaterecord via duplicaterecordid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N task -> postfollow via regardingobjectid (Schema: task_PostFollows)</summary>
        public EntityCollection GetPostfollowByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("postfollow")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] task->postfollow via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N task -> postregarding via regardingobjectid (Schema: task_PostRegardings)</summary>
        public EntityCollection GetPostregardingByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("postregarding")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] task->postregarding via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N task -> postrole via regardingobjectid (Schema: task_PostRoles)</summary>
        public EntityCollection GetPostroleByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("postrole")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] task->postrole via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N task -> principalobjectattributeaccess via objectid (Schema: task_principalobjectattributeaccess)</summary>
        public EntityCollection GetPrincipalobjectattributeaccessByObjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("principalobjectattributeaccess")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("objectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] task->principalobjectattributeaccess via objectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N task -> processsession via regardingobjectid (Schema: Task_ProcessSessions)</summary>
        public EntityCollection GetProcesssessionByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("processsession")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] task->processsession via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N task -> queueitem via objectid (Schema: Task_QueueItem)</summary>
        public EntityCollection GetQueueitemByObjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("queueitem")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("objectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] task->queueitem via objectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N task -> syncerror via regardingobjectid (Schema: Task_SyncErrors)</summary>
        public EntityCollection GetSyncerrorByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("syncerror")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] task->syncerror via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N task -> userentityinstancedata via objectid (Schema: userentityinstancedata_task)</summary>
        public EntityCollection GetUserentityinstancedataByObjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("userentityinstancedata")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("objectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] task->userentityinstancedata via objectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>N:1 task -> account via regardingobjectid (Schema: Account_Tasks)</summary>
        public Collection<Account> GetAccountFromRegardingobjectid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("regardingobjectid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "account", StringComparison.OrdinalIgnoreCase))
                return new Collection<Account>(); // empty
            var e = this.Org().Retrieve("account", er.Id, columns);
            this.Trace("[REL] task->account via regardingobjectid id={0}", er.Id);
            return new Collection<Account>(new[] { e.ToEntity<Account>() });
        }

        /// <summary>N:1 task -> activitypointer via activityid (Schema: activity_pointer_task)</summary>
        public EntityCollection GetActivitypointerFromActivityid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("activityid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "activitypointer", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("activitypointer", er.Id, columns);
            this.Trace("[REL] task->activitypointer via activityid id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 task -> adx_invitation via regardingobjectid (Schema: adx_invitation_Tasks)</summary>
        public EntityCollection GetAdxInvitationFromRegardingobjectid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("regardingobjectid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "adx_invitation", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("adx_invitation", er.Id, columns);
            this.Trace("[REL] task->adx_invitation via regardingobjectid id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 task -> businessunit via owningbusinessunit (Schema: business_unit_task_activities)</summary>
        public EntityCollection GetBusinessunitFromOwningbusinessunit(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("owningbusinessunit");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "businessunit", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("businessunit", er.Id, columns);
            this.Trace("[REL] task->businessunit via owningbusinessunit id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 task -> contact via regardingobjectid (Schema: Contact_Tasks)</summary>
        public Collection<Contact> GetContactFromRegardingobjectid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("regardingobjectid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "contact", StringComparison.OrdinalIgnoreCase))
                return new Collection<Contact>(); // empty
            var e = this.Org().Retrieve("contact", er.Id, columns);
            this.Trace("[REL] task->contact via regardingobjectid id={0}", er.Id);
            return new Collection<Contact>(new[] { e.ToEntity<Contact>() });
        }

        /// <summary>N:1 task -> knowledgearticle via regardingobjectid (Schema: KnowledgeArticle_Tasks)</summary>
        public EntityCollection GetKnowledgearticleFromRegardingobjectid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("regardingobjectid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "knowledgearticle", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("knowledgearticle", er.Id, columns);
            this.Trace("[REL] task->knowledgearticle via regardingobjectid id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 task -> knowledgebaserecord via regardingobjectid (Schema: KnowledgeBaseRecord_Tasks)</summary>
        public EntityCollection GetKnowledgebaserecordFromRegardingobjectid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("regardingobjectid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "knowledgebaserecord", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("knowledgebaserecord", er.Id, columns);
            this.Trace("[REL] task->knowledgebaserecord via regardingobjectid id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 task -> systemuser via createdby (Schema: lk_task_createdby)</summary>
        public EntityCollection GetSystemuserFromCreatedby(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("createdby");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "systemuser", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("systemuser", er.Id, columns);
            this.Trace("[REL] task->systemuser via createdby id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 task -> systemuser via createdonbehalfby (Schema: lk_task_createdonbehalfby)</summary>
        public EntityCollection GetSystemuserFromCreatedonbehalfby(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("createdonbehalfby");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "systemuser", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("systemuser", er.Id, columns);
            this.Trace("[REL] task->systemuser via createdonbehalfby id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 task -> systemuser via modifiedby (Schema: lk_task_modifiedby)</summary>
        public EntityCollection GetSystemuserFromModifiedby(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("modifiedby");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "systemuser", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("systemuser", er.Id, columns);
            this.Trace("[REL] task->systemuser via modifiedby id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 task -> systemuser via modifiedonbehalfby (Schema: lk_task_modifiedonbehalfby)</summary>
        public EntityCollection GetSystemuserFromModifiedonbehalfby(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("modifiedonbehalfby");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "systemuser", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("systemuser", er.Id, columns);
            this.Trace("[REL] task->systemuser via modifiedonbehalfby id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 task -> sla via slaid (Schema: manualsla_task)</summary>
        public EntityCollection GetSlaFromSlaid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("slaid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "sla", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("sla", er.Id, columns);
            this.Trace("[REL] task->sla via slaid id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 task -> mspp_adplacement via regardingobjectid (Schema: mspp_adplacement_Tasks)</summary>
        public EntityCollection GetMsppAdplacementFromRegardingobjectid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("regardingobjectid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "mspp_adplacement", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("mspp_adplacement", er.Id, columns);
            this.Trace("[REL] task->mspp_adplacement via regardingobjectid id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 task -> mspp_pollplacement via regardingobjectid (Schema: mspp_pollplacement_Tasks)</summary>
        public EntityCollection GetMsppPollplacementFromRegardingobjectid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("regardingobjectid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "mspp_pollplacement", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("mspp_pollplacement", er.Id, columns);
            this.Trace("[REL] task->mspp_pollplacement via regardingobjectid id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 task -> mspp_publishingstatetransitionrule via regardingobjectid (Schema: mspp_publishingstatetransitionrule_Tasks)</summary>
        public EntityCollection GetMsppPublishingstatetransitionruleFromRegardingobjectid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("regardingobjectid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "mspp_publishingstatetransitionrule", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("mspp_publishingstatetransitionrule", er.Id, columns);
            this.Trace("[REL] task->mspp_publishingstatetransitionrule via regardingobjectid id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 task -> mspp_redirect via regardingobjectid (Schema: mspp_redirect_Tasks)</summary>
        public EntityCollection GetMsppRedirectFromRegardingobjectid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("regardingobjectid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "mspp_redirect", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("mspp_redirect", er.Id, columns);
            this.Trace("[REL] task->mspp_redirect via regardingobjectid id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 task -> mspp_shortcut via regardingobjectid (Schema: mspp_shortcut_Tasks)</summary>
        public EntityCollection GetMsppShortcutFromRegardingobjectid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("regardingobjectid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "mspp_shortcut", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("mspp_shortcut", er.Id, columns);
            this.Trace("[REL] task->mspp_shortcut via regardingobjectid id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 task -> mspp_website via regardingobjectid (Schema: mspp_website_Tasks)</summary>
        public EntityCollection GetMsppWebsiteFromRegardingobjectid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("regardingobjectid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "mspp_website", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("mspp_website", er.Id, columns);
            this.Trace("[REL] task->mspp_website via regardingobjectid id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 task -> owner via ownerid (Schema: owner_tasks)</summary>
        public EntityCollection GetOwnerFromOwnerid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("ownerid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "owner", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("owner", er.Id, columns);
            this.Trace("[REL] task->owner via ownerid id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 task -> processstage via stageid (Schema: processstage_tasks)</summary>
        public EntityCollection GetProcessstageFromStageid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("stageid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "processstage", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("processstage", er.Id, columns);
            this.Trace("[REL] task->processstage via stageid id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 task -> sample_challenge via regardingobjectid (Schema: sample_challenge_Tasks)</summary>
        public EntityCollection GetSampleChallengeFromRegardingobjectid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("regardingobjectid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "sample_challenge", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("sample_challenge", er.Id, columns);
            this.Trace("[REL] task->sample_challenge via regardingobjectid id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 task -> sample_fundraiser via regardingobjectid (Schema: sample_fundraiser_Tasks)</summary>
        public EntityCollection GetSampleFundraiserFromRegardingobjectid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("regardingobjectid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "sample_fundraiser", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("sample_fundraiser", er.Id, columns);
            this.Trace("[REL] task->sample_fundraiser via regardingobjectid id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 task -> sample_idea via regardingobjectid (Schema: sample_idea_Tasks)</summary>
        public EntityCollection GetSampleIdeaFromRegardingobjectid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("regardingobjectid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "sample_idea", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("sample_idea", er.Id, columns);
            this.Trace("[REL] task->sample_idea via regardingobjectid id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 task -> sample_product via regardingobjectid (Schema: sample_product_Tasks)</summary>
        public EntityCollection GetSampleProductFromRegardingobjectid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("regardingobjectid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "sample_product", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("sample_product", er.Id, columns);
            this.Trace("[REL] task->sample_product via regardingobjectid id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 task -> sample_review via regardingobjectid (Schema: sample_review_Tasks)</summary>
        public EntityCollection GetSampleReviewFromRegardingobjectid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("regardingobjectid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "sample_review", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("sample_review", er.Id, columns);
            this.Trace("[REL] task->sample_review via regardingobjectid id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 task -> sample_teamproject via regardingobjectid (Schema: sample_teamproject_Tasks)</summary>
        public EntityCollection GetSampleTeamprojectFromRegardingobjectid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("regardingobjectid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "sample_teamproject", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("sample_teamproject", er.Id, columns);
            this.Trace("[REL] task->sample_teamproject via regardingobjectid id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 task -> sla via slainvokedid (Schema: sla_task)</summary>
        public EntityCollection GetSlaFromSlainvokedid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("slainvokedid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "sla", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("sla", er.Id, columns);
            this.Trace("[REL] task->sla via slainvokedid id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 task -> team via owningteam (Schema: team_task)</summary>
        public EntityCollection GetTeamFromOwningteam(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("owningteam");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "team", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("team", er.Id, columns);
            this.Trace("[REL] task->team via owningteam id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 task -> transactioncurrency via transactioncurrencyid (Schema: TransactionCurrency_Task)</summary>
        public EntityCollection GetTransactioncurrencyFromTransactioncurrencyid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("transactioncurrencyid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "transactioncurrency", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("transactioncurrency", er.Id, columns);
            this.Trace("[REL] task->transactioncurrency via transactioncurrencyid id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 task -> uds_assetallocation via regardingobjectid (Schema: uds_assetallocation_Tasks)</summary>
        public EntityCollection GetUdsAssetallocationFromRegardingobjectid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("regardingobjectid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "uds_assetallocation", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("uds_assetallocation", er.Id, columns);
            this.Trace("[REL] task->uds_assetallocation via regardingobjectid id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 task -> systemuser via owninguser (Schema: user_task)</summary>
        public EntityCollection GetSystemuserFromOwninguser(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("owninguser");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "systemuser", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("systemuser", er.Id, columns);
            this.Trace("[REL] task->systemuser via owninguser id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:N task <-> subscription via task_subscription_association (intersect: subscriptionmanuallytrackedobject)</summary>
        public EntityCollection GetSubscriptionViaTaskSubscriptionAssociation(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("subscription")
            {
                ColumnSet = columns,
                TopCount = top
            };

            // Join OTHER -> INTERSECT on OTHER primary id, filter INTERSECT.thisIdAttr == this.Id
            var link = new LinkEntity("subscription", "subscriptionmanuallytrackedobject", "subscriptionid", "subscriptionid", JoinOperator.Inner)
            {
                LinkCriteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("objectid", ConditionOperator.Equal, this.Id) }
                }
            };

            q.LinkEntities.Add(link);
            this.Trace("[REL] task<->subscription via task_subscription_association");
            return this.Org().RetrieveMultiple(q);
        }

}
}
