// <auto-generated />

using System;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using System.Collections.ObjectModel;
using System.Linq;
using static uds.CRM.Model.ContextMixin; // Org(), Trace()

namespace uds.CRM.Model {
public partial class Contact
{
        /// <summary>1:N contact -> account via primarycontactid (Schema: account_primary_contact)</summary>
        public Collection<Account> GetAccountByPrimarycontactid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("account")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("primarycontactid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->account via primarycontactid id={0}", this.Id);
            var ec = this.Org().RetrieveMultiple(q);
            var list = new Collection<Account>(ec.Entities.Select(e => e.ToEntity<Account>()).ToList());
            return list;
        }

        /// <summary>1:N contact -> adx_externalidentity via adx_contactid (Schema: adx_contact_externalidentity)</summary>
        public EntityCollection GetAdxExternalidentityByAdxContactid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("adx_externalidentity")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("adx_contactid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->adx_externalidentity via adx_contactid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> adx_invitation via adx_invitecontact (Schema: adx_invitation_invitecontact)</summary>
        public EntityCollection GetAdxInvitationByAdxInvitecontact(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("adx_invitation")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("adx_invitecontact", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->adx_invitation via adx_invitecontact id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> adx_invitation via adx_invitercontact (Schema: adx_invitation_invitercontact)</summary>
        public EntityCollection GetAdxInvitationByAdxInvitercontact(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("adx_invitation")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("adx_invitercontact", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->adx_invitation via adx_invitercontact id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> adx_invitation via adx_redeemedcontact (Schema: adx_invitation_redeemedContact)</summary>
        public EntityCollection GetAdxInvitationByAdxRedeemedcontact(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("adx_invitation")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("adx_redeemedcontact", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->adx_invitation via adx_redeemedcontact id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> adx_webformsession via adx_contact (Schema: adx_webformsession_contact)</summary>
        public EntityCollection GetAdxWebformsessionByAdxContact(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("adx_webformsession")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("adx_contact", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->adx_webformsession via adx_contact id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> actioncard via regardingobjectid (Schema: contact_actioncard)</summary>
        public EntityCollection GetActioncardByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("actioncard")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->actioncard via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> activityparty via partyid (Schema: contact_activity_parties)</summary>
        public EntityCollection GetActivitypartyByPartyid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("activityparty")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("partyid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->activityparty via partyid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> activitypointer via regardingobjectid (Schema: Contact_ActivityPointers)</summary>
        public EntityCollection GetActivitypointerByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("activitypointer")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->activitypointer via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> adx_inviteredemption via regardingobjectid (Schema: contact_adx_inviteredemptions)</summary>
        public EntityCollection GetAdxInviteredemptionByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("adx_inviteredemption")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->adx_inviteredemption via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> adx_portalcomment via regardingobjectid (Schema: contact_adx_portalcomments)</summary>
        public EntityCollection GetAdxPortalcommentByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("adx_portalcomment")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->adx_portalcomment via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> annotation via objectid (Schema: Contact_Annotation)</summary>
        public EntityCollection GetAnnotationByObjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("annotation")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("objectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->annotation via objectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> appointment via regardingobjectid (Schema: Contact_Appointments)</summary>
        public EntityCollection GetAppointmentByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("appointment")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->appointment via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> asyncoperation via regardingobjectid (Schema: Contact_AsyncOperations)</summary>
        public EntityCollection GetAsyncoperationByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("asyncoperation")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->asyncoperation via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> bulkdeletefailure via regardingobjectid (Schema: Contact_BulkDeleteFailures)</summary>
        public EntityCollection GetBulkdeletefailureByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("bulkdeletefailure")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->bulkdeletefailure via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> chat via regardingobjectid (Schema: contact_chats)</summary>
        public EntityCollection GetChatByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("chat")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->chat via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> connection via record1id (Schema: contact_connections1)</summary>
        public EntityCollection GetConnectionByRecord1id(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("connection")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("record1id", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->connection via record1id id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> connection via record2id (Schema: contact_connections2)</summary>
        public EntityCollection GetConnectionByRecord2id(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("connection")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("record2id", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->connection via record2id id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> contact via parentcustomerid (Schema: contact_customer_contacts)</summary>
        public Collection<Contact> GetContactByParentcustomerid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("contact")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("parentcustomerid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->contact via parentcustomerid id={0}", this.Id);
            var ec = this.Org().RetrieveMultiple(q);
            var list = new Collection<Contact>(ec.Entities.Select(e => e.ToEntity<Contact>()).ToList());
            return list;
        }

        /// <summary>1:N contact -> customerrelationship via customerid (Schema: contact_customer_relationship_customer)</summary>
        public EntityCollection GetCustomerrelationshipByCustomerid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("customerrelationship")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("customerid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->customerrelationship via customerid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> customerrelationship via partnerid (Schema: contact_customer_relationship_partner)</summary>
        public EntityCollection GetCustomerrelationshipByPartnerid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("customerrelationship")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("partnerid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->customerrelationship via partnerid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> customeraddress via parentid (Schema: Contact_CustomerAddress)</summary>
        public EntityCollection GetCustomeraddressByParentid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("customeraddress")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("parentid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->customeraddress via parentid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> duplicaterecord via baserecordid (Schema: Contact_DuplicateBaseRecord)</summary>
        public EntityCollection GetDuplicaterecordByBaserecordid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("duplicaterecord")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("baserecordid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->duplicaterecord via baserecordid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> duplicaterecord via duplicaterecordid (Schema: Contact_DuplicateMatchingRecord)</summary>
        public EntityCollection GetDuplicaterecordByDuplicaterecordid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("duplicaterecord")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("duplicaterecordid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->duplicaterecord via duplicaterecordid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> email via emailsender (Schema: Contact_Email_EmailSender)</summary>
        public EntityCollection GetEmailByEmailsender(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("email")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("emailsender", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->email via emailsender id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> email via regardingobjectid (Schema: Contact_Emails)</summary>
        public EntityCollection GetEmailByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("email")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->email via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> externalpartyitem via regardingobjectid (Schema: Contact_ExternalPartyItems)</summary>
        public EntityCollection GetExternalpartyitemByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("externalpartyitem")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->externalpartyitem via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> fax via regardingobjectid (Schema: Contact_Faxes)</summary>
        public EntityCollection GetFaxByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("fax")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->fax via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> feedback via regardingobjectid (Schema: Contact_Feedback)</summary>
        public EntityCollection GetFeedbackByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("feedback")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->feedback via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> letter via regardingobjectid (Schema: Contact_Letters)</summary>
        public EntityCollection GetLetterByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("letter")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->letter via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> mailboxtrackingfolder via regardingobjectid (Schema: Contact_MailboxTrackingFolder)</summary>
        public EntityCollection GetMailboxtrackingfolderByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("mailboxtrackingfolder")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->mailboxtrackingfolder via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> contact via masterid (Schema: contact_master_contact)</summary>
        public Collection<Contact> GetContactByMasterid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("contact")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("masterid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->contact via masterid id={0}", this.Id);
            var ec = this.Org().RetrieveMultiple(q);
            var list = new Collection<Contact>(ec.Entities.Select(e => e.ToEntity<Contact>()).ToList());
            return list;
        }

        /// <summary>1:N contact -> msfp_alert via regardingobjectid (Schema: contact_msfp_alerts)</summary>
        public EntityCollection GetMsfpAlertByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("msfp_alert")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->msfp_alert via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> msfp_surveyinvite via regardingobjectid (Schema: contact_msfp_surveyinvites)</summary>
        public EntityCollection GetMsfpSurveyinviteByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("msfp_surveyinvite")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->msfp_surveyinvite via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> msfp_surveyresponse via regardingobjectid (Schema: contact_msfp_surveyresponses)</summary>
        public EntityCollection GetMsfpSurveyresponseByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("msfp_surveyresponse")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->msfp_surveyresponse via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> phonecall via regardingobjectid (Schema: Contact_Phonecalls)</summary>
        public EntityCollection GetPhonecallByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("phonecall")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->phonecall via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> postfollow via regardingobjectid (Schema: contact_PostFollows)</summary>
        public EntityCollection GetPostfollowByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("postfollow")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->postfollow via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> postregarding via regardingobjectid (Schema: contact_PostRegardings)</summary>
        public EntityCollection GetPostregardingByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("postregarding")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->postregarding via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> postrole via regardingobjectid (Schema: contact_PostRoles)</summary>
        public EntityCollection GetPostroleByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("postrole")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->postrole via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> principalobjectattributeaccess via objectid (Schema: contact_principalobjectattributeaccess)</summary>
        public EntityCollection GetPrincipalobjectattributeaccessByObjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("principalobjectattributeaccess")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("objectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->principalobjectattributeaccess via objectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> processsession via regardingobjectid (Schema: Contact_ProcessSessions)</summary>
        public EntityCollection GetProcesssessionByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("processsession")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->processsession via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> recurringappointmentmaster via regardingobjectid (Schema: Contact_RecurringAppointmentMasters)</summary>
        public EntityCollection GetRecurringappointmentmasterByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("recurringappointmentmaster")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->recurringappointmentmaster via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> sample_donation via regardingobjectid (Schema: contact_sample_donations)</summary>
        public EntityCollection GetSampleDonationByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("sample_donation")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->sample_donation via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> socialactivity via regardingobjectid (Schema: Contact_SocialActivities)</summary>
        public EntityCollection GetSocialactivityByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("socialactivity")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->socialactivity via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> syncerror via regardingobjectid (Schema: Contact_SyncErrors)</summary>
        public EntityCollection GetSyncerrorByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("syncerror")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->syncerror via regardingobjectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> task via regardingobjectid (Schema: Contact_Tasks)</summary>
        public Collection<Task> GetTaskByRegardingobjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("task")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regardingobjectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->task via regardingobjectid id={0}", this.Id);
            var ec = this.Org().RetrieveMultiple(q);
            var list = new Collection<Task>(ec.Entities.Select(e => e.ToEntity<Task>()).ToList());
            return list;
        }

        /// <summary>1:N contact -> feedback via createdbycontact (Schema: lk_contact_feedback_createdby)</summary>
        public EntityCollection GetFeedbackByCreatedbycontact(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("feedback")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("createdbycontact", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->feedback via createdbycontact id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> feedback via createdonbehalfbycontact (Schema: lk_contact_feedback_createdonbehalfby)</summary>
        public EntityCollection GetFeedbackByCreatedonbehalfbycontact(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("feedback")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("createdonbehalfbycontact", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->feedback via createdonbehalfbycontact id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> msdynce_course via msdynce_instructorname (Schema: msdynce_Course_InstructorName_Contact)</summary>
        public EntityCollection GetMsdynceCourseByMsdynceInstructorname(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("msdynce_course")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("msdynce_instructorname", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->msdynce_course via msdynce_instructorname id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> msdynce_registration via msdynce_attendeename (Schema: msdynce_Registration_AttendeeName_Contact)</summary>
        public EntityCollection GetMsdynceRegistrationByMsdynceAttendeename(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("msdynce_registration")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("msdynce_attendeename", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->msdynce_registration via msdynce_attendeename id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> msdynce_registration via msdynce_parent (Schema: msdynce_Registration_Parent_Contact)</summary>
        public EntityCollection GetMsdynceRegistrationByMsdynceParent(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("msdynce_registration")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("msdynce_parent", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->msdynce_registration via msdynce_parent id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> powerpagessiteaifeedback via contact (Schema: PowerPagesSiteAIFeedback_Contact_Contact)</summary>
        public EntityCollection GetPowerpagessiteaifeedbackByContact(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("powerpagessiteaifeedback")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("contact", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->powerpagessiteaifeedback via contact id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> slakpiinstance via regarding (Schema: slakpiinstance_contact)</summary>
        public EntityCollection GetSlakpiinstanceByRegarding(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("slakpiinstance")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("regarding", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->slakpiinstance via regarding id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> socialactivity via postauthor (Schema: socialactivity_postauthor_contacts)</summary>
        public EntityCollection GetSocialactivityByPostauthor(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("socialactivity")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("postauthor", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->socialactivity via postauthor id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> socialactivity via postauthoraccount (Schema: socialactivity_postauthoraccount_contacts)</summary>
        public EntityCollection GetSocialactivityByPostauthoraccount(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("socialactivity")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("postauthoraccount", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->socialactivity via postauthoraccount id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> socialprofile via customerid (Schema: Socialprofile_customer_contacts)</summary>
        public EntityCollection GetSocialprofileByCustomerid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("socialprofile")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("customerid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->socialprofile via customerid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> uds_assetallocation via uds_employee (Schema: uds_assetallocation_Employee_contact)</summary>
        public EntityCollection GetUdsAssetallocationByUdsEmployee(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("uds_assetallocation")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("uds_employee", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->uds_assetallocation via uds_employee id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> uds_assetallocation via uds_requestedby (Schema: uds_assetallocation_RequestedBy_contact)</summary>
        public EntityCollection GetUdsAssetallocationByUdsRequestedby(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("uds_assetallocation")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("uds_requestedby", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->uds_assetallocation via uds_requestedby id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>1:N contact -> contact via uds_linemanager (Schema: uds_contact_linemanager_contact)</summary>
        public Collection<Contact> GetContactByUdsLinemanager(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("contact")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("uds_linemanager", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->contact via uds_linemanager id={0}", this.Id);
            var ec = this.Org().RetrieveMultiple(q);
            var list = new Collection<Contact>(ec.Entities.Select(e => e.ToEntity<Contact>()).ToList());
            return list;
        }

        /// <summary>1:N contact -> userentityinstancedata via objectid (Schema: userentityinstancedata_contact)</summary>
        public EntityCollection GetUserentityinstancedataByObjectid(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("userentityinstancedata")
            {
                ColumnSet = columns,
                TopCount = top,
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("objectid", ConditionOperator.Equal, this.Id) }
                }
            };
            this.Trace("[REL] contact->userentityinstancedata via objectid id={0}", this.Id);
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>N:1 contact -> businessunit via owningbusinessunit (Schema: business_unit_contacts)</summary>
        public EntityCollection GetBusinessunitFromOwningbusinessunit(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("owningbusinessunit");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "businessunit", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("businessunit", er.Id, columns);
            this.Trace("[REL] contact->businessunit via owningbusinessunit id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 contact -> account via parentcustomerid (Schema: contact_customer_accounts)</summary>
        public Collection<Account> GetAccountFromParentcustomerid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("parentcustomerid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "account", StringComparison.OrdinalIgnoreCase))
                return new Collection<Account>(); // empty
            var e = this.Org().Retrieve("account", er.Id, columns);
            this.Trace("[REL] contact->account via parentcustomerid id={0}", er.Id);
            return new Collection<Account>(new[] { e.ToEntity<Account>() });
        }

        /// <summary>N:1 contact -> contact via parentcustomerid (Schema: contact_customer_contacts)</summary>
        public Collection<Contact> GetContactFromParentcustomerid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("parentcustomerid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "contact", StringComparison.OrdinalIgnoreCase))
                return new Collection<Contact>(); // empty
            var e = this.Org().Retrieve("contact", er.Id, columns);
            this.Trace("[REL] contact->contact via parentcustomerid id={0}", er.Id);
            return new Collection<Contact>(new[] { e.ToEntity<Contact>() });
        }

        /// <summary>N:1 contact -> contact via masterid (Schema: contact_master_contact)</summary>
        public Collection<Contact> GetContactFromMasterid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("masterid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "contact", StringComparison.OrdinalIgnoreCase))
                return new Collection<Contact>(); // empty
            var e = this.Org().Retrieve("contact", er.Id, columns);
            this.Trace("[REL] contact->contact via masterid id={0}", er.Id);
            return new Collection<Contact>(new[] { e.ToEntity<Contact>() });
        }

        /// <summary>N:1 contact -> systemuser via owninguser (Schema: contact_owning_user)</summary>
        public EntityCollection GetSystemuserFromOwninguser(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("owninguser");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "systemuser", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("systemuser", er.Id, columns);
            this.Trace("[REL] contact->systemuser via owninguser id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 contact -> imagedescriptor via uds_photoid (Schema: ImageDescriptor_Contact_uds_photo)</summary>
        public EntityCollection GetImagedescriptorFromUdsPhotoid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("uds_photoid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "imagedescriptor", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("imagedescriptor", er.Id, columns);
            this.Trace("[REL] contact->imagedescriptor via uds_photoid id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 contact -> systemuser via createdonbehalfby (Schema: lk_contact_createdonbehalfby)</summary>
        public EntityCollection GetSystemuserFromCreatedonbehalfby(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("createdonbehalfby");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "systemuser", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("systemuser", er.Id, columns);
            this.Trace("[REL] contact->systemuser via createdonbehalfby id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 contact -> imagedescriptor via entityimageid (Schema: lk_contact_entityimage)</summary>
        public EntityCollection GetImagedescriptorFromEntityimageid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("entityimageid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "imagedescriptor", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("imagedescriptor", er.Id, columns);
            this.Trace("[REL] contact->imagedescriptor via entityimageid id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 contact -> systemuser via modifiedonbehalfby (Schema: lk_contact_modifiedonbehalfby)</summary>
        public EntityCollection GetSystemuserFromModifiedonbehalfby(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("modifiedonbehalfby");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "systemuser", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("systemuser", er.Id, columns);
            this.Trace("[REL] contact->systemuser via modifiedonbehalfby id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 contact -> systemuser via createdby (Schema: lk_contactbase_createdby)</summary>
        public EntityCollection GetSystemuserFromCreatedby(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("createdby");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "systemuser", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("systemuser", er.Id, columns);
            this.Trace("[REL] contact->systemuser via createdby id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 contact -> systemuser via modifiedby (Schema: lk_contactbase_modifiedby)</summary>
        public EntityCollection GetSystemuserFromModifiedby(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("modifiedby");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "systemuser", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("systemuser", er.Id, columns);
            this.Trace("[REL] contact->systemuser via modifiedby id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 contact -> externalparty via createdbyexternalparty (Schema: lk_externalparty_contact_createdby)</summary>
        public EntityCollection GetExternalpartyFromCreatedbyexternalparty(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("createdbyexternalparty");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "externalparty", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("externalparty", er.Id, columns);
            this.Trace("[REL] contact->externalparty via createdbyexternalparty id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 contact -> externalparty via modifiedbyexternalparty (Schema: lk_externalparty_contact_modifiedby)</summary>
        public EntityCollection GetExternalpartyFromModifiedbyexternalparty(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("modifiedbyexternalparty");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "externalparty", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("externalparty", er.Id, columns);
            this.Trace("[REL] contact->externalparty via modifiedbyexternalparty id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 contact -> sla via slaid (Schema: manualsla_contact)</summary>
        public EntityCollection GetSlaFromSlaid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("slaid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "sla", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("sla", er.Id, columns);
            this.Trace("[REL] contact->sla via slaid id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 contact -> account via msa_managingpartnerid (Schema: msa_contact_managingpartner)</summary>
        public Collection<Account> GetAccountFromMsaManagingpartnerid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("msa_managingpartnerid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "account", StringComparison.OrdinalIgnoreCase))
                return new Collection<Account>(); // empty
            var e = this.Org().Retrieve("account", er.Id, columns);
            this.Trace("[REL] contact->account via msa_managingpartnerid id={0}", er.Id);
            return new Collection<Account>(new[] { e.ToEntity<Account>() });
        }

        /// <summary>N:1 contact -> owner via ownerid (Schema: owner_contacts)</summary>
        public EntityCollection GetOwnerFromOwnerid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("ownerid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "owner", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("owner", er.Id, columns);
            this.Trace("[REL] contact->owner via ownerid id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 contact -> processstage via stageid (Schema: processstage_contact)</summary>
        public EntityCollection GetProcessstageFromStageid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("stageid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "processstage", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("processstage", er.Id, columns);
            this.Trace("[REL] contact->processstage via stageid id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 contact -> sample_idea via sample_contributorsid (Schema: sample_sample_idea_contact)</summary>
        public EntityCollection GetSampleIdeaFromSampleContributorsid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("sample_contributorsid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "sample_idea", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("sample_idea", er.Id, columns);
            this.Trace("[REL] contact->sample_idea via sample_contributorsid id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 contact -> sla via slainvokedid (Schema: sla_contact)</summary>
        public EntityCollection GetSlaFromSlainvokedid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("slainvokedid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "sla", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("sla", er.Id, columns);
            this.Trace("[REL] contact->sla via slainvokedid id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 contact -> systemuser via preferredsystemuserid (Schema: system_user_contacts)</summary>
        public EntityCollection GetSystemuserFromPreferredsystemuserid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("preferredsystemuserid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "systemuser", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("systemuser", er.Id, columns);
            this.Trace("[REL] contact->systemuser via preferredsystemuserid id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 contact -> team via owningteam (Schema: team_contacts)</summary>
        public EntityCollection GetTeamFromOwningteam(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("owningteam");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "team", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("team", er.Id, columns);
            this.Trace("[REL] contact->team via owningteam id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 contact -> transactioncurrency via transactioncurrencyid (Schema: transactioncurrency_contact)</summary>
        public EntityCollection GetTransactioncurrencyFromTransactioncurrencyid(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("transactioncurrencyid");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "transactioncurrency", StringComparison.OrdinalIgnoreCase))
                return new EntityCollection(); // empty
            var e = this.Org().Retrieve("transactioncurrency", er.Id, columns);
            this.Trace("[REL] contact->transactioncurrency via transactioncurrencyid id={0}", er.Id);
            return new EntityCollection(new[] { e });
        }

        /// <summary>N:1 contact -> contact via uds_linemanager (Schema: uds_contact_linemanager_contact)</summary>
        public Collection<Contact> GetContactFromUdsLinemanager(ColumnSet columns)
        {
            var er = this.GetAttributeValue<EntityReference>("uds_linemanager");
            if (er == null || er.Id == Guid.Empty || !string.Equals(er.LogicalName, "contact", StringComparison.OrdinalIgnoreCase))
                return new Collection<Contact>(); // empty
            var e = this.Org().Retrieve("contact", er.Id, columns);
            this.Trace("[REL] contact->contact via uds_linemanager id={0}", er.Id);
            return new Collection<Contact>(new[] { e.ToEntity<Contact>() });
        }

        /// <summary>N:N contact <-> adx_invitation via adx_invitation_invitecontacts (intersect: adx_invitation_invitecontacts)</summary>
        public EntityCollection GetAdxInvitationViaAdxInvitationInvitecontacts(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("adx_invitation")
            {
                ColumnSet = columns,
                TopCount = top
            };

            // Join OTHER -> INTERSECT on OTHER primary id, filter INTERSECT.thisIdAttr == this.Id
            var link = new LinkEntity("adx_invitation", "adx_invitation_invitecontacts", "adx_invitationid", "adx_invitationid", JoinOperator.Inner)
            {
                LinkCriteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("contactid", ConditionOperator.Equal, this.Id) }
                }
            };

            q.LinkEntities.Add(link);
            this.Trace("[REL] contact<->adx_invitation via adx_invitation_invitecontacts");
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>N:N contact <-> adx_invitation via adx_invitation_redeemedcontacts (intersect: adx_invitation_redeemedcontacts)</summary>
        public EntityCollection GetAdxInvitationViaAdxInvitationRedeemedcontacts(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("adx_invitation")
            {
                ColumnSet = columns,
                TopCount = top
            };

            // Join OTHER -> INTERSECT on OTHER primary id, filter INTERSECT.thisIdAttr == this.Id
            var link = new LinkEntity("adx_invitation", "adx_invitation_redeemedcontacts", "adx_invitationid", "adx_invitationid", JoinOperator.Inner)
            {
                LinkCriteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("contactid", ConditionOperator.Equal, this.Id) }
                }
            };

            q.LinkEntities.Add(link);
            this.Trace("[REL] contact<->adx_invitation via adx_invitation_redeemedcontacts");
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>N:N contact <-> subscription via contact_subscription_association (intersect: subscriptionmanuallytrackedobject)</summary>
        public EntityCollection GetSubscriptionViaContactSubscriptionAssociation(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("subscription")
            {
                ColumnSet = columns,
                TopCount = top
            };

            // Join OTHER -> INTERSECT on OTHER primary id, filter INTERSECT.thisIdAttr == this.Id
            var link = new LinkEntity("subscription", "subscriptionmanuallytrackedobject", "subscriptionid", "subscriptionid", JoinOperator.Inner)
            {
                LinkCriteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("objectid", ConditionOperator.Equal, this.Id) }
                }
            };

            q.LinkEntities.Add(link);
            this.Trace("[REL] contact<->subscription via contact_subscription_association");
            return this.Org().RetrieveMultiple(q);
        }

        /// <summary>N:N contact <-> powerpagecomponent via powerpagecomponent_mspp_webrole_contact (intersect: powerpagecomponent_mspp_webrole_contact)</summary>
        public EntityCollection GetPowerpagecomponentViaPowerpagecomponentMsppWebroleContact(ColumnSet columns, int? top = null)
        {
            var q = new QueryExpression("powerpagecomponent")
            {
                ColumnSet = columns,
                TopCount = top
            };

            // Join OTHER -> INTERSECT on OTHER primary id, filter INTERSECT.thisIdAttr == this.Id
            var link = new LinkEntity("powerpagecomponent", "powerpagecomponent_mspp_webrole_contact", "powerpagecomponentid", "powerpagecomponentid", JoinOperator.Inner)
            {
                LinkCriteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression("contactid", ConditionOperator.Equal, this.Id) }
                }
            };

            q.LinkEntities.Add(link);
            this.Trace("[REL] contact<->powerpagecomponent via powerpagecomponent_mspp_webrole_contact");
            return this.Org().RetrieveMultiple(q);
        }

}
}
